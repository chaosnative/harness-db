---
name: Agent-Plane-Setup-Pipeline
on:
  workflow_dispatch:
    inputs:
      NewAgentSetup:
        type: boolean
        default: ""
      HceAccessUrl:
        default: ""
      ProjectID:
        default: ""
      AgentNamespace:
        default: ""
      AgentName:
        default: ""
      AgentScope:
        default: ""
      SkipSSLVerify:
        default: ""

jobs:
  AGENT_SETUP:
    runs-on: ubuntu-latest
    env:
      AGENT_NAMESPACE: ${{ github.event.inputs.AgentNamespace }}
      INSTALLATION_MODE: ${{ github.event.inputs.AgentScope }}
      ACCESS_URL: ${{ github.event.inputs.HceAccessUrl }}
      AGENT_NAME: ${{ github.event.inputs.AgentName }}
      PROJECT_ID: ${{ github.event.inputs.ProjectID }}
      SKIP_SSL: ${{ github.event.inputs.SkipSSLVerify }}
    steps:
      - uses: actions/checkout@v2

      - name: Authenticate Google Cloud SDK
        if: always()
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: 'vedant-cluster'
          location: 'us-east5-a'

      - name: Installing chaosCTL on Agent Cluster
        run: |
          curl -O https://litmusctl-production-bucket.s3.amazonaws.com/litmusctl-linux-amd64-v0.9.0.tar.gz
          tar -zxvf litmusctl-linux-amd64-v0.9.0.tar.gz
          chmod +x litmusctl
          sudo mv litmusctl /usr/local/bin/litmusctl
          litmusctl version

      - name: Connecting External Agent to control-plane (HCE)
        run: |
          litmusctl config set-account --endpoint=${ACCESS_URL} --username="admin" --password="litmus"  --skipSSL=$SKIP_SSL
          if [[ "$INSTALLATION_MODE" == "namespace" ]];then

            kubectl create ns ${AGENT_NAMESPACE}

            # Installing CRD's, required for namespaced mode
            kubectl apply -f https://raw.githubusercontent.com/chaosnative/hce-charts/main/k8s-manifests/2.8.0/hce-crds.yaml

            litmusctl create agent --agent-name=${AGENT_NAME} --project-id=${PROJECT_ID} --installation-mode="namespace" --namespace=${AGENT_NAMESPACE} --kubeconfig=$KUBECONFIG --skip-agent-ssl=$SKIP_SSL --skipSSL=$SKIP_SSL --non-interactive
          
          elif [[ "$INSTALLATION_MODE" == "cluster" ]];then

            litmusctl create agent --agent-name=${AGENT_NAME} --project-id=${PROJECT_ID} --installation-mode="cluster" --namespace=${AGENT_NAMESPACE} --kubeconfig=$KUBECONFIG --skip-agent-ssl=$SKIP_SSL --skipSSL=$SKIP_SSL --non-interactive
          else
            echo "Invalid Installation Scope provided"
          fi

      - name: Adding ImagePullSecrets in Execution plane components
        run: |
          deployments=( chaos-exporter chaos-operator-ce event-tracker subscriber workflow-controller )
          for i in "${deployments[@]}"
          do
            kubectl patch deploy $i -p '{ "spec": { "template": { "spec": { "imagePullSecrets": [{"name": "regcred"}] } } } }' -n ${AGENT_NAMESPACE}
          done
          sleep 10

      - name: Updating the configMap for accessing Server through Gateway URL
        run: |
          kubectl patch configmap/agent-config -n ${AGENT_NAMESPACE} --type merge -p '{"data":{"SERVER_ADDR": "'${ACCESS_URL}'/ws/query"}}'
          pod_name=$(kubectl get pods --selector="app=subscriber" --output=jsonpath={.items..metadata.name} -n ${AGENT_NAMESPACE})
          kubectl delete pod $pod_name -n ${AGENT_NAMESPACE}

      - name: Waiting for all components to be ready
        run: |
          kubectl wait --for=condition=Ready pods --all --namespace ${AGENT_NAMESPACE} --timeout=720s

